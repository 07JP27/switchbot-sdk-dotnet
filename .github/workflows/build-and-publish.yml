name: Build and Release

on:
  push:
    branches: [ pre-release, release ]

jobs:
  build:
    runs-on: windows-latest
    outputs:
      version: ${{ steps.set-version-to-output.outputs.version }}
    steps:
    - uses: actions/checkout@v2
    - name: Add msbuild to PATH
      uses: microsoft/setup-msbuild@v1.0.2
    - name: Update version number
      if: github.ref != 'refs/heads/release'
      shell: pwsh
      run: |
        $doc = [XML](Get-Content 'DoinJomain.Switchbot/DoinJomain.Switchbot.csproj')
        $doc.Project.PropertyGroup.Version += '-pre' + (Get-Date).ToString("yyyyMMddHHmm")
        $doc.Save('DoinJomain.Switchbot/DoinJomain.Switchbot.csproj')   
    - name: Set version to outputs
      id: set-version-to-output
      shell: pwsh
      run: |
        $doc = [XML](Get-Content 'DoinJomain.Switchbot/DoinJomain.Switchbot.csproj')
        echo "::set-output name=version::$($doc.Project.PropertyGroup.Version)"    
    - name: Install dependencies
      run: dotnet restore DoinJomain.Switchbot/DoinJomain.Switchbot.csproj
    - name: Build
      run: msbuild DoinJomain.Switchbot/DoinJomain.Switchbot.csproj -p:Configuration=Release -p:Platform="Any CPU"
    - name: Copy package files
      run: |
        mkdir dist
        Copy-Item (Get-ChildItem -Path "DoinJomain.Switchbot/**/*.nupkg" -Recurse) -Destination dist
        Copy-Item (Get-ChildItem -Path "DoinJomain.Switchbot/**/*.snupkg" -Recurse) -Destination dist
      shell: pwsh
    - name: Archive NuGet packages
      uses: actions/upload-artifact@v1
      with:
        name: dist
        path: dist

  release-to-nuget:
    runs-on: windows-latest
    needs: [build]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/pre-release' || github.ref == 'refs/heads/release')
    steps:
      - name: Download archives
        uses: actions/download-artifact@v2
        with:
          name: dist
      - name: Publish packages
        run: dotnet nuget push **/*.nupkg --skip-duplicate -k ${{ secrets.NUGET_APIKEY }} -s https://api.nuget.org/v3/index.json

  create-release:
    runs-on: windows-latest
    needs: [build]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/pre-release' || github.ref == 'refs/heads/release')
    steps:
      - name: Download archives
        uses: actions/download-artifact@v2
        with:
          name: dist
          path: dist
      - name: Create a release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.build.outputs.version }}
          release_name: Release ${{ needs.build.outputs.version }}
          body: |
            TBW
          draft: true
          prerelease: ${{ github.ref == 'refs/heads/pre-release' }}
      - name: Archive packages
        shell: pwsh
        run: |
          Compress-Archive -Path dist -DestinationPath packages.zip
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: packages.zip
          asset_name: packages-${{ needs.build.outputs.version }}.zip
          asset_content_type: application/zip